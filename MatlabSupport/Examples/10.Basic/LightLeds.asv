%% LightLeds.m demo example.
%
% Description:
% The aim of this example is to show some of the methods of
% causing the LEDs to light. The first part of the code is where
% red, green and blue LEDs chase anti-clockwise around the Engduino,
% getting gradually faster until they blur into white.
%
% When going sufficiently fast, we display red green and blue on all
% LEDs. After that code rests back to initial state and repeat the 
% execution. 
%
% July 2014, Engduino team: support@engduino.org
% 

%% Initialize variables

% Check if the Engduino object already exists. Otherwise initialize it.
if (~exist('e', 'var'))
    % Create Engduino object and open COM port. You do not need to select
    % an active COM port, as it should be detected automatically. However,
    % in the case of unsuccessfull connection, you may initialize Engduino
    % object with passing the active COM port. E.g. e = engduino('COM8');
    % To open the 'Bluetooth' port you need to initialize the Engduino
    % object with the 'Bluetooth' keyword and your Bluetooth device name.
    % E.g. e = engduino('Bluetooth', 'HC-05'); Demo mode can be enabled by
    % initialize the Engduino object with 'demo' keyword. E.g. e =
    % engduino('demo');
    e = engduino();
end

% Set frequency [Hz]. Steps per second.
frequency = 10;
 
%% Main loop
% Execute loop until exit condition is met.
disp('You can terminate execution by:')
disp('- Press ''ESC''')
disp('- Press ''q''')
disp('- Press a button on the Engduino board')
disp('- Close the figure')
while ExitCondition([], e, true)

    % Lowpass filter
    light = 0.7*light + 0.3*e.getLight(); 
    
    % Turn on Leds
    % The result is a 10 bit value - so in a range 0-1023 If we spread this
    % between our 16 LEDs evenly, it means we have to divide the value
    % obtained by 64 to tell us what the biggest numbered LED we have to
    % light should be.
    leds = ones(1, 16).*e.COLOR_OFF;
    lval = floor(light/64);
    leds(1:lval) = ones(1, length(lval)).*e.COLOR_WHITE;
    e.setLeds(leds);
    
    % Pause for one time interval.
    pause(1/frequency);
end